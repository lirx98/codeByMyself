#ifndef MRT_LATTICES_HH
#define MRT_LATTICES_HH

#include"thermalConsistancyMRTLattice3D.h"

namespace plb {
namespace descriptors {
// MRT D3Q19 ////////////////////////////////////////////////////////////

template <typename T>
const T TCMRTD3Q19DescriptorBase<T>::M[BaseDescriptor::q][BaseDescriptor::q] = {
    /*0*/ {
        (T)1, (T)1, (T)1, (T)1, (T)1, (T)1, (T)1, (T)1, (T)1, (T)1, (T)1, (T)1, (T)1, (T)1, (T)1,
        (T)1, (T)1, (T)1, (T)1},
    /*1*/
    {(T)-30, (T)-11, (T)-11, (T)-11, (T)8, (T)8, (T)8, (T)8, (T)8, (T)8, (T)-11, (T)-11, (T)-11,
     (T)8, (T)8, (T)8, (T)8, (T)8, (T)8},
    /*2*/
    {(T)12, (T)-4, (T)-4, (T)-4, (T)1, (T)1, (T)1, (T)1, (T)1, (T)1, (T)-4, (T)-4, (T)-4, (T)1,
     (T)1, (T)1, (T)1, (T)1, (T)1},
    /*3*/
    {T(), (T)-1, T(), T(), (T)-1, (T)-1, (T)-1, (T)-1, T(), T(), (T)1, T(), T(), (T)1, (T)1, (T)1,
     (T)1, T(), T()},
    /*4*/
    {T(), (T)4, T(), T(), (T)-1, (T)-1, (T)-1, (T)-1, T(), T(), (T)-4, T(), T(), (T)1, (T)1, (T)1,
     (T)1, T(), T()},
    /*5*/
    {T(), T(), (T)-1, T(), (T)-1, (T)1, T(), T(), (T)-1, (T)-1, T(), (T)1, T(), (T)1, (T)-1, T(),
     T(), (T)1, (T)1},
    /*6*/
    {T(), T(), (T)4, T(), (T)-1, (T)1, T(), T(), (T)-1, (T)-1, T(), (T)-4, T(), (T)1, (T)-1, T(),
     T(), (T)1, (T)1},
    /*7*/
    {T(), T(), T(), (T)-1, T(), T(), (T)-1, (T)1, (T)-1, (T)1, T(), T(), (T)1, T(), T(), (T)1,
     (T)-1, (T)1, (T)-1},
    /*8*/
    {T(), T(), T(), (T)4, T(), T(), (T)-1, (T)1, (T)-1, (T)1, T(), T(), (T)-4, T(), T(), (T)1,
     (T)-1, (T)1, (T)-1},
    /*9*/
    {T(), (T)2, (T)-1, (T)-1, (T)1, (T)1, (T)1, (T)1, (T)-2, (T)-2, (T)2, (T)-1, (T)-1, (T)1, (T)1,
     (T)1, (T)1, (T)-2, (T)-2},
    /*10*/
    {T(), (T)-4, (T)2, (T)2, (T)1, (T)1, (T)1, (T)1, (T)-2, (T)-2, (T)-4, (T)2, (T)2, (T)1, (T)1,
     (T)1, (T)1, (T)-2, (T)-2},
    /*11*/
    {T(), T(), (T)1, (T)-1, (T)1, (T)1, (T)-1, (T)-1, T(), T(), T(), (T)1, (T)-1, (T)1, (T)1, (T)-1,
     (T)-1, T(), T()},
    /*12*/
    {T(), T(), (T)-2, (T)2, (T)1, (T)1, (T)-1, (T)-1, T(), T(), T(), (T)-2, (T)2, (T)1, (T)1, (T)-1,
     (T)-1, T(), T()},
    /*13*/
    {T(), T(), T(), T(), (T)1, (T)-1, T(), T(), T(), T(), T(), T(), T(), (T)1, (T)-1, T(), T(), T(),
     T()},
    /*14*/
    {T(), T(), T(), T(), T(), T(), T(), T(), (T)1, (T)-1, T(), T(), T(), T(), T(), T(), T(), (T)1,
     (T)-1},
    /*15*/
    {T(), T(), T(), T(), T(), T(), (T)1, (T)-1, T(), T(), T(), T(), T(), T(), T(), (T)1, (T)-1, T(),
     T()},
    /*16*/
    {T(), T(), T(), T(), (T)-1, (T)-1, (T)1, (T)1, T(), T(), T(), T(), T(), (T)1, (T)1, (T)-1,
     (T)-1, T(), T()},
    /*17*/
    {T(), T(), T(), T(), (T)1, (T)-1, T(), T(), (T)-1, (T)-1, T(), T(), T(), (T)-1, (T)1, T(), T(),
     (T)1, (T)1},
    /*18*/
    {T(), T(), T(), T(), T(), T(), (T)-1, (T)1, (T)1, (T)-1, T(), T(), T(), T(), T(), (T)1, (T)-1,
     (T)-1, (T)1}};

template <typename T>
const T TCMRTD3Q19DescriptorBase<T>::invM[BaseDescriptor::q][BaseDescriptor::q] = {
    /*0*/ {
        (T)1 / (T)19, -(T)5 / (T)399, (T)1 / (T)21, T(), T(), T(), T(), T(), T(), T(), T(), T(),
        T(), T(), T(), T(), T(), T(), T()},

    /*1*/
    {(T)1 / (T)19, -(T)11 / (T)2394, -(T)1 / (T)63, -(T)1 / (T)10, (T)1 / (T)10, T(), T(), T(), T(),
     (T)1 / (T)18, -(T)1 / (T)18, T(), T(), T(), T(), T(), T(), T(), T()},

    /*2*/
    {(T)1 / (T)19, -(T)11 / (T)2394, -(T)1 / (T)63, T(), T(), -(T)1 / (T)10, (T)1 / (T)10, T(), T(),
     -(T)1 / (T)36, (T)1 / (T)36, (T)1 / (T)12, -(T)1 / (T)12, T(), T(), T(), T(), T(), T()},

    /*3*/
    {(T)1 / (T)19, -(T)11 / (T)2394, -(T)1 / (T)63, T(), T(), T(), T(), -(T)1 / (T)10, (T)1 / (T)10,
     -(T)1 / (T)36, (T)1 / (T)36, -(T)1 / (T)12, (T)1 / (T)12, T(), T(), T(), T(), T(), T()},

    /*4*/
    {(T)1 / (T)19, (T)4 / (T)1197, (T)1 / (T)252, -(T)1 / (T)10, -(T)1 / (T)40, -(T)1 / (T)10,
     -(T)1 / (T)40, T(), T(), (T)1 / (T)36, (T)1 / (T)72, (T)1 / (T)12, (T)1 / (T)24, (T)1 / (T)4,
     T(), T(), -(T)1 / (T)8, (T)1 / (T)8, T()},

    /*5*/
    {(T)1 / (T)19, (T)4 / (T)1197, (T)1 / (T)252, -(T)1 / (T)10, -(T)1 / (T)40, (T)1 / (T)10,
     (T)1 / (T)40, T(), T(), (T)1 / (T)36, (T)1 / (T)72, (T)1 / (T)12, (T)1 / (T)24, -(T)1 / (T)4,
     T(), T(), -(T)1 / (T)8, -(T)1 / (T)8, T()},

    /*6*/
    {(T)1 / (T)19, (T)4 / (T)1197, (T)1 / (T)252, -(T)1 / (T)10, -(T)1 / (T)40, T(), T(),
     -(T)1 / (T)10, -(T)1 / (T)40, (T)1 / (T)36, (T)1 / (T)72, -(T)1 / (T)12, -(T)1 / (T)24, T(),
     T(), (T)1 / (T)4, (T)1 / (T)8, T(), -(T)1 / (T)8},

    /*7*/
    {(T)1 / (T)19, (T)4 / (T)1197, (T)1 / (T)252, -(T)1 / (T)10, -(T)1 / (T)40, T(), T(),
     (T)1 / (T)10, (T)1 / (T)40, (T)1 / (T)36, (T)1 / (T)72, -(T)1 / (T)12, -(T)1 / (T)24, T(), T(),
     -(T)1 / (T)4, (T)1 / (T)8, T(), (T)1 / (T)8},

    /*8*/
    {(T)1 / (T)19, (T)4 / (T)1197, (T)1 / (T)252, T(), T(), -(T)1 / (T)10, -(T)1 / (T)40,
     -(T)1 / (T)10, -(T)1 / (T)40, -(T)1 / (T)18, -(T)1 / (T)36, T(), T(), T(), (T)1 / (T)4, T(),
     T(), -(T)1 / (T)8, (T)1 / (T)8},

    /*9*/
    {(T)1 / (T)19, (T)4 / (T)1197, (T)1 / (T)252, T(), T(), -(T)1 / (T)10, -(T)1 / (T)40,
     (T)1 / (T)10, (T)1 / (T)40, -(T)1 / (T)18, -(T)1 / (T)36, T(), T(), T(), -(T)1 / (T)4, T(),
     T(), -(T)1 / (T)8, -(T)1 / (T)8},

    /*10*/
    {(T)1 / (T)19, -(T)11 / (T)2394, -(T)1 / (T)63, (T)1 / (T)10, -(T)1 / (T)10, T(), T(), T(), T(),
     (T)1 / (T)18, -(T)1 / (T)18, T(), T(), T(), T(), T(), T(), T(), T()},

    /*11*/
    {(T)1 / (T)19, -(T)11 / (T)2394, -(T)1 / (T)63, T(), T(), (T)1 / (T)10, -(T)1 / (T)10, T(), T(),
     -(T)1 / (T)36, (T)1 / (T)36, (T)1 / (T)12, -(T)1 / (T)12, T(), T(), T(), T(), T(), T()},

    /*12*/
    {(T)1 / (T)19, -(T)11 / (T)2394, -(T)1 / (T)63, T(), T(), T(), T(), (T)1 / (T)10, -(T)1 / (T)10,
     -(T)1 / (T)36, (T)1 / (T)36, -(T)1 / (T)12, (T)1 / (T)12, T(), T(), T(), T(), T(), T()},

    /*13*/
    {(T)1 / (T)19, (T)4 / (T)1197, (T)1 / (T)252, (T)1 / (T)10, (T)1 / (T)40, (T)1 / (T)10,
     (T)1 / (T)40, T(), T(), (T)1 / (T)36, (T)1 / (T)72, (T)1 / (T)12, (T)1 / (T)24, (T)1 / (T)4,
     T(), T(), (T)1 / (T)8, -(T)1 / (T)8, T()},

    /*14*/
    {(T)1 / (T)19, (T)4 / (T)1197, (T)1 / (T)252, (T)1 / (T)10, (T)1 / (T)40, -(T)1 / (T)10,
     -(T)1 / (T)40, T(), T(), (T)1 / (T)36, (T)1 / (T)72, (T)1 / (T)12, (T)1 / (T)24, -(T)1 / (T)4,
     T(), T(), (T)1 / (T)8, (T)1 / (T)8, T()},

    /*15*/
    {(T)1 / (T)19, (T)4 / (T)1197, (T)1 / (T)252, (T)1 / (T)10, (T)1 / (T)40, T(), T(),
     (T)1 / (T)10, (T)1 / (T)40, (T)1 / (T)36, (T)1 / (T)72, -(T)1 / (T)12, -(T)1 / (T)24, T(), T(),
     (T)1 / (T)4, -(T)1 / (T)8, T(), (T)1 / (T)8},

    /*16*/
    {(T)1 / (T)19, (T)4 / (T)1197, (T)1 / (T)252, (T)1 / (T)10, (T)1 / (T)40, T(), T(),
     -(T)1 / (T)10, -(T)1 / (T)40, (T)1 / (T)36, (T)1 / (T)72, -(T)1 / (T)12, -(T)1 / (T)24, T(),
     T(), -(T)1 / (T)4, -(T)1 / (T)8, T(), -(T)1 / (T)8},

    /*17*/
    {(T)1 / (T)19, (T)4 / (T)1197, (T)1 / (T)252, T(), T(), (T)1 / (T)10, (T)1 / (T)40,
     (T)1 / (T)10, (T)1 / (T)40, -(T)1 / (T)18, -(T)1 / (T)36, T(), T(), T(), (T)1 / (T)4, T(), T(),
     (T)1 / (T)8, -(T)1 / (T)8},

    /*18*/
    {(T)1 / (T)19, (T)4 / (T)1197, (T)1 / (T)252, T(), T(), (T)1 / (T)10, (T)1 / (T)40,
     -(T)1 / (T)10, -(T)1 / (T)40, -(T)1 / (T)18, -(T)1 / (T)36, T(), T(), T(), -(T)1 / (T)4, T(),
     T(), (T)1 / (T)8, (T)1 / (T)8}};

template <typename T>
const T TCMRTD3Q19DescriptorBase<T>::S[BaseDescriptor::q] = {
    /*s0*/ (T)1,  // rho (conserved)
    /*s1*/ (T)1.19,
    /*s2*/ (T)1.4,
    /*s3*/ (T)1,    // rho*ux (conserved)
    /*s4*/ (T)1.2,  // <=> q index
    /*s5*/ (T)1,    // rho*uy (conserved)
    /*s6*/ (T)1.2,  // = s4 <=> q index
    /*s7*/ (T)1,    // rho*uz (conserved)
    /*s8*/ (T)1.2,  // = s4 <=> q index
    /*s9*/ T(),     // should be equal to s13, used to define nu
    /*s10*/ (T)1.4,
    /*s11*/ T(),  // = s9,
    /*s12*/ (T)1.4,
    /*s13*/ T(),  // should be equal to s9, used to define nu
    /*s14*/ T(),  // = s13,
    /*s15*/ T(),  // = s13,
    /*s16*/ (T)1.98,
    /*s17*/ (T)1.98,  // = s16,
    /*s18*/ (T)1.98   // = s16,
};

template <typename T>
const int TCMRTD3Q19DescriptorBase<T>::momentumIndexes[TCMRTD3Q19DescriptorBase<T>::jIndexes] = {
    3, 5, 7};

template <typename T>
const int TCMRTD3Q19DescriptorBase<T>::shearViscIndexes[TCMRTD3Q19DescriptorBase<T>::shearIndexes] = {
    9, 11, 13, 14, 15};

template <typename T>
const int TCMRTD3Q19DescriptorBase<T>::qViscIndexes[TCMRTD3Q19DescriptorBase<T>::qIndexes] = {4, 6, 8};

template <typename T>
const T TCMRTD3Q19DescriptorBase<T>::forceModify[BaseDescriptor::q] = {
    T(), T(), T(), T(), T(), T(), T(), T(), T(), T(), T(), T(), T(), T(), T(), T(), T(), T(), T(),
};

template <typename T>
const char TCForcedMRTShanChenD3Q19Descriptor<T>::name[] = "thermalConsistancyMRTD3Q19";
};
};  // namespace plb

#endif